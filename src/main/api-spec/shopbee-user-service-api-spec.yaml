openapi: "3.0.3"
info:
  version: 1.0.1
  title: The user service API

tags:
  - name: users
    description: Operations about users
  - name: addresses
    description: Operations about addresses

paths:
  /users:
    get:
      summary: Retrieve a list of users
      operationId: getUsers
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: An array of users (paged).
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/User"
                    - type: object
                      properties:
                        addresses:
                          writeOnly: true
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        404:
          description: "Not Found: The requested resource is not found"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                    id:
                      readOnly: true
                    addresses:
                      readOnly: true
                    phone:
                      readOnly: true
                    status:
                      default: "ACTIVE"
                  required:
                    - username
                    - email
                    - firstName
                    - lastName
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: string
                description: Unique identifier for the created user (UUID).
                example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
          headers:
            Location:
              description: The location of the created user
              schema:
                type: string
                format: uri
                example: "/users/f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
        400:
          description: "Bad Request: The request is invalid due to malformed syntax or validation error"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        409:
          description: "Conflict: The request could not be completed due to a conflict with the current state of the resource"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"

  /users/{userId}:
    get:
      summary: Retrieve a user by ID
      operationId: getUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        200:
          description: "User found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"
    put:
      summary: Update a user by ID
      operationId: updateUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                    id:
                      readOnly: true
                    username:
                      readOnly: true
                    addresses:
                      readOnly: true
                    phone:
                      readOnly: true
                  required:
                    - email
      responses:
        200:
          description: "User updated"
        400:
          description: "Bad Request: The request is invalid due to malformed syntax or validation error"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        409:
          description: "Conflict: The request could not be completed due to a conflict with the current state of the resource"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"

    patch:
      summary: Partially update a user by ID
      operationId: patchUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                    id:
                      readOnly: true
                    username:
                      readOnly: true
                    addresses:
                      readOnly: true
                    phone:
                      readOnly: true
      responses:
        200:
          description: "User updated"
        400:
          description: "Bad Request: The request is invalid due to malformed syntax or validation error"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        409:
          description: "Conflict: The request could not be completed due to a conflict with the current state of the resource"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"

    delete:
      summary: Delete a user by ID
      operationId: deleteUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        204:
          description: "User deleted"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        404:
          description: "Not Found: The requested resource is not found"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"

  /users/{userId}/addresses:
    get:
      summary: Retrieve a list of addresses for a user
      operationId: getUserAddresses
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: "An array of addresses for the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"
    post:
      summary: Create a new address for a user
      operationId: createUserAddress
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Address"
                - type: object
                  properties:
                    id:
                      readOnly: true
                  required:
                    - type
                    - ward
                    - district
                    - city
                    - postalCode
      responses:
        201:
          description: "Address created"
          content:
            application/json:
              schema:
                type: string
                description: Unique identifier for the created address (UUID).
                example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
          headers:
            Location:
              description: The location of the created address
              schema:
                type: string
                format: uri
                example: "/users/f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f/addresses/f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
                    
        400:
          description: "Bad Request: The request is invalid due to malformed syntax or validation error"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"

  /users/{userId}/addresses/{addressId}:
    put:
      summary: Update an address for a user
      operationId: updateUserAddress
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/addressId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Address"
                - type: object
                  properties:
                    id:
                      readOnly: true
                  required:
                    - type
                    - ward
                    - district
                    - city
                    - postalCode
      responses:
        200:
          description: "Address updated"
        400:
          description: "Bad Request: The request is invalid due to malformed syntax or validation error"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"
    patch:
      summary: Patch an address for a user
      operationId: patchUserAddress
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/addressId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Address"
                - type: object
                  properties:
                    id:
                      readOnly: true
      responses:
        200:
          description: "Address updated"
        400:
          description: "Bad Request: The request is invalid due to malformed syntax or validation error"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"
    delete:
      summary: Delete an address for a user
      operationId: deleteUserAddress
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/addressId"
      responses:
        204:
          description: "Address deleted"
        401:
          description: "Unauthorized: JWT token is missing or invalid"
        403:
          description: "Forbidden: The caller does not have permission"
        500:
          description: "Internal Server Error: An unexpected error occurred"
        501:
          description: "Not Implemented: The operation is not implemented"
        503:
          description: "Service Unavailable: The service is temporarily unavailable"

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Address:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier for the address (UUID).
          example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
        type:
          type: string
          format: open-enumeration
          description: |
            Type of the address
            * HOME
            * WORK
            * OTHER
          example: "HOME"
        street:
          type: string
          description: Street of the address.
          example: "123 Main St"
        ward:
          type: string
          description: Ward of the address.
          example: "Ward 1"
        district:
          type: string
          description: District of the address.
          example: "District 1"
        city:
          type: string
          description: City of the address.
          example: "Springfield"
        postalCode:
          type: string
          description: Postal code of the address.
          example: "62701"
        isDefault:
          type: boolean
          description: A flag indicating whether this is the default address.
          example: true
    Phone:
      type: object
      properties:
        countryCode:
          type: string
          description: Country code of the phone number.
          example: "+84"
        number:
          type: string
          description: Number of the phone number.
          example: "123456789"
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier for the user (UUID).
          example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
        username:
          type: string
          maxLength: 64
          minLength: 8
          description: Unique username for the user.
          example: "johndoe123"
        email:
          type: string
          description: Email address of the user.
          format: email
          maxLength: 255
          example: "johndoe@gmail.com"
        firstName:
          type: string
          description: First name of the user.
          example: "John"
        lastName:
          type: string
          description: Last name of the user.
          example: "Doe"
        gender:
          type: string
          format: open-enumeration
          description: |
            Gender of the user
            * MALE
            * FEMALE
            * OTHER
          example: "MALE"
        phone:
          $ref: "#/components/schemas/Phone"
        birthDate:
          type: string
          format: date
          description: Birth date of the user. Format is "YYYY-MM-DD" (ISO 8601).
          example: "1990-01-01"
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        status:
          type: string
          format: open-enumeration
          description: |
            Status of the user
            * ACTIVE
            * INACTIVE
            * SUSPENDED
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the user was created. Format is "YYYY-MM-DDTHH:MM:SSZ" (ISO 8601).
          example: "2021-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the user was last updated. Format is "YYYY-MM-DDTHH:MM:SSZ" (ISO 8601).
          example: "2021-01-01T12:00:00Z"
  parameters:
    offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
        example: 0
    limit:
      name: limit
      in: query
      description: The number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
        example: 20
    userId:
      name: userId
      in: path
      description: ID of the user to retrieve.
      required: true
      schema:
        type: string
        example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
    addressId:
      name: addressId
      in: path
      description: ID of the address to retrieve.
      required: true
      schema:
        type: string
        example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
